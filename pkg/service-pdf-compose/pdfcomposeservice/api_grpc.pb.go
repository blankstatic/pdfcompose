// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: api/api.proto

package pdfcomposeservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PDFComposeService_SendFile_FullMethodName = "/pdfcompose.PDFComposeService/SendFile"
)

// PDFComposeServiceClient is the client API for PDFComposeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFComposeServiceClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (PDFComposeService_SendFileClient, error)
}

type pDFComposeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFComposeServiceClient(cc grpc.ClientConnInterface) PDFComposeServiceClient {
	return &pDFComposeServiceClient{cc}
}

func (c *pDFComposeServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (PDFComposeService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &PDFComposeService_ServiceDesc.Streams[0], PDFComposeService_SendFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pDFComposeServiceSendFileClient{stream}
	return x, nil
}

type PDFComposeService_SendFileClient interface {
	Send(*FileRequest) error
	CloseAndRecv() (*FileResponse, error)
	grpc.ClientStream
}

type pDFComposeServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *pDFComposeServiceSendFileClient) Send(m *FileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pDFComposeServiceSendFileClient) CloseAndRecv() (*FileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFComposeServiceServer is the server API for PDFComposeService service.
// All implementations must embed UnimplementedPDFComposeServiceServer
// for forward compatibility
type PDFComposeServiceServer interface {
	SendFile(PDFComposeService_SendFileServer) error
	mustEmbedUnimplementedPDFComposeServiceServer()
}

// UnimplementedPDFComposeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPDFComposeServiceServer struct {
}

func (UnimplementedPDFComposeServiceServer) SendFile(PDFComposeService_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedPDFComposeServiceServer) mustEmbedUnimplementedPDFComposeServiceServer() {}

// UnsafePDFComposeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFComposeServiceServer will
// result in compilation errors.
type UnsafePDFComposeServiceServer interface {
	mustEmbedUnimplementedPDFComposeServiceServer()
}

func RegisterPDFComposeServiceServer(s grpc.ServiceRegistrar, srv PDFComposeServiceServer) {
	s.RegisterService(&PDFComposeService_ServiceDesc, srv)
}

func _PDFComposeService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PDFComposeServiceServer).SendFile(&pDFComposeServiceSendFileServer{stream})
}

type PDFComposeService_SendFileServer interface {
	SendAndClose(*FileResponse) error
	Recv() (*FileRequest, error)
	grpc.ServerStream
}

type pDFComposeServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *pDFComposeServiceSendFileServer) SendAndClose(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pDFComposeServiceSendFileServer) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFComposeService_ServiceDesc is the grpc.ServiceDesc for PDFComposeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFComposeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PDFComposeService",
	HandlerType: (*PDFComposeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _PDFComposeService_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
